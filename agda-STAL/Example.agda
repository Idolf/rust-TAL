open import Util
open import Grammar
open import TermJudgments
open import Subtyping
open import Substitution
open import SubstitutionLemmas
open import TypeJudgments
open import Semantics

-- Static type checking
foo-word : WordValue
foo-word = globval 0 5 ⟦⟦ α (α⁼ 4) ∷ α (α⁼ 4) ∷ α (α⁼ 4) ∷ α (α⁼ 4) ∷ ρ (ρ⁼ 4) ∷ [] ⟧⟧

foo : InstructionSequence
foo = jmp (word foo-word)

foo-Γ : RegisterAssignment
foo-Γ = registerₐ (ρ⁼ 4) (α⁼ 0 ∷ α⁼ 1 ∷ α⁼ 2 ∷ α⁼ 3 ∷ [])

foo-Δ : TypeAssignment
foo-Δ = α ∷ α ∷ α ∷ α ∷ ρ ∷ []

foo-τ : Type
foo-τ = ∀[ foo-Δ  ] foo-Γ

foo-is : [ foo-τ ] , foo-Δ , foo-Γ ⊢ foo instructionsequence
foo-is = of-jmp (Γ-≤ (σ-≤ (valid-ρ⁼ (there (there (there (there here)))))) ((α⁼-≤ (valid-α⁼ here)) ∷ ((α⁼-≤ (valid-α⁼ (there here))) ∷ ((α⁼-≤ (valid-α⁼ (there (there here)))) ∷ ((α⁼-≤ (valid-α⁼ (there (there (there here))))) ∷ []))))) (of-word (of-inst (of-inst (of-inst (of-inst (of-inst (of-globval here (∀-≤ (valid-α ∷ (valid-α ∷ (valid-α ∷ (valid-α ∷ (valid-ρ ∷ []))))) (Γ-≤ (σ-≤ (valid-ρ⁼ (there (there (there (there here)))))) ((α⁼-≤ (valid-α⁼ here)) ∷ (α⁼-≤ (valid-α⁼ (there here)) ∷ α⁼-≤ (valid-α⁼ (there (there here))) ∷ α⁼-≤ (valid-α⁼ (there (there (there here)))) ∷ [])))) refl) (valid-zero (valid-inst (valid-α (valid-α⁼ (there (there (there (there here)))))))) run-inst (subst-registerₐ (subst-ρ-¬inst (subst-inst-> (s≤s z≤n))) ((subst-α-inst (subst-α-¬inst (subst-weaken-≥ z≤n))) ∷ (subst-α-¬inst (subst-inst-> (s≤s z≤n)) ∷ subst-α-¬inst (subst-inst-> (s≤s z≤n)) ∷ subst-α-¬inst (subst-inst-> (s≤s z≤n)) ∷ [])))) (valid-zero (valid-inst (valid-α (valid-α⁼ (there (there (there (there here)))))))) run-inst (subst-registerₐ (subst-ρ-¬inst (subst-inst-> (s≤s z≤n))) ((subst-α-¬inst (subst-inst-> (s≤s z≤n))) ∷ (subst-α-inst (subst-α-¬inst (subst-weaken-≥ z≤n)) ∷ subst-α-¬inst (subst-inst-> (s≤s z≤n)) ∷ subst-α-¬inst (subst-inst-> (s≤s z≤n)) ∷ [])))) (valid-zero (valid-inst (valid-α (valid-α⁼ (there (there (there (there here)))))))) run-inst (subst-registerₐ (subst-ρ-¬inst (subst-inst-> (s≤s z≤n))) (subst-α-¬inst (subst-inst-> (s≤s z≤n)) ∷ subst-α-¬inst (subst-inst-> (s≤s z≤n)) ∷ subst-α-inst (subst-α-¬inst (subst-weaken-≥ z≤n)) ∷ subst-α-¬inst (subst-inst-> (s≤s z≤n)) ∷ []))) (valid-zero (valid-inst (valid-α (valid-α⁼ (there (there (there (there here)))))))) run-inst (subst-registerₐ (subst-ρ-¬inst (subst-inst-> (s≤s z≤n))) (subst-α-¬inst (subst-inst-> (s≤s z≤n)) ∷ subst-α-¬inst (subst-inst-> (s≤s z≤n)) ∷ subst-α-¬inst (subst-inst-> (s≤s z≤n)) ∷ subst-α-inst (subst-α-¬inst (subst-weaken-≥ z≤n)) ∷ []))) (valid-zero (valid-inst (valid-ρ (valid-ρ⁼ (there (there (there (there here)))))))) run-inst (subst-registerₐ (subst-ρ-inst (subst-ρ-¬inst (subst-weaken-≥ z≤n))) (subst-α-¬inst (subst-inst-> (s≤s z≤n)) ∷ subst-α-¬inst (subst-inst-> (s≤s z≤n)) ∷ subst-α-¬inst (subst-inst-> (s≤s z≤n)) ∷ subst-α-¬inst (subst-inst-> (s≤s z≤n)) ∷ []))))

-- Dynamic type-checking
foo-word' : WordValue
foo-word' = globval 0 5 ⟦⟦ α int ∷ α int ∷ α int ∷ α int ∷ ρ [] ∷ [] ⟧⟧

foo' : InstructionSequence
foo' = jmp (word foo-word')

int-reg : RegisterFile
int-reg = register [] (const 0 ∷ const 1 ∷ const 2 ∷ const 3 ∷ [])

foo-G : Globals
foo-G = [ ∀[ foo-Δ ] foo-Γ ∙ foo ]

foo'-program : foo-G ⊢ [] , int-reg , foo' program
foo'-program = of-program (of-globals ((of-gval (valid-registerₐ (valid-ρ⁼ (there (there (there (there here))))) (valid-α⁼ here ∷ valid-α⁼ (there here) ∷ valid-α⁼ (there (there here)) ∷ valid-α⁼ (there (there (there here))) ∷ [])) (of-jmp (Γ-≤ (σ-≤ (valid-ρ⁼ (there (there (there (there here)))))) (α⁼-≤ (valid-α⁼ here) ∷ α⁼-≤ (valid-α⁼ (there here)) ∷ α⁼-≤ (valid-α⁼ (there (there here))) ∷ α⁼-≤ (valid-α⁼ (there (there (there here)))) ∷ [])) (of-word (of-inst (of-inst (of-inst (of-inst (of-inst (of-globval here (∀-≤ (valid-α ∷ valid-α ∷ valid-α ∷ valid-α ∷ valid-ρ ∷ []) (Γ-≤ (σ-≤ (valid-ρ⁼ (there (there (there (there here)))))) (α⁼-≤ (valid-α⁼ here) ∷ α⁼-≤ (valid-α⁼ (there here)) ∷ α⁼-≤ (valid-α⁼ (there (there here))) ∷ α⁼-≤ (valid-α⁼ (there (there (there here)))) ∷ []))) refl) (valid-zero (valid-inst (valid-α (valid-α⁼ (there (there (there (there here)))))))) run-inst (subst-registerₐ (subst-ρ-¬inst (subst-inst-> (s≤s z≤n))) (subst-α-inst (subst-α-¬inst (subst-weaken-≥ z≤n)) ∷ subst-α-¬inst (subst-inst-> (s≤s z≤n)) ∷ subst-α-¬inst (subst-inst-> (s≤s z≤n)) ∷ subst-α-¬inst (subst-inst-> (s≤s z≤n)) ∷ []))) (valid-zero (valid-inst (valid-α (valid-α⁼ (there (there (there (there here)))))))) run-inst (subst-registerₐ (subst-ρ-¬inst (subst-inst-> (s≤s z≤n))) (subst-α-¬inst (subst-inst-> (s≤s z≤n)) ∷ subst-α-inst (subst-α-¬inst (subst-weaken-≥ z≤n)) ∷ subst-α-¬inst (subst-inst-> (s≤s z≤n)) ∷ subst-α-¬inst (subst-inst-> (s≤s z≤n)) ∷ []))) (valid-zero (valid-inst (valid-α (valid-α⁼ (there (there (there (there here)))))))) run-inst (subst-registerₐ (subst-ρ-¬inst (subst-inst-> (s≤s z≤n))) (subst-α-¬inst (subst-inst-> (s≤s z≤n)) ∷ subst-α-¬inst (subst-inst-> (s≤s z≤n)) ∷ subst-α-inst (subst-α-¬inst (subst-weaken-≥ z≤n)) ∷ subst-α-¬inst (subst-inst-> (s≤s z≤n)) ∷ []))) (valid-zero (valid-inst (valid-α (valid-α⁼ (there (there (there (there here)))))))) run-inst (subst-registerₐ (subst-ρ-¬inst (subst-inst-> (s≤s z≤n))) (subst-α-¬inst (subst-inst-> (s≤s z≤n)) ∷ subst-α-¬inst (subst-inst-> (s≤s z≤n)) ∷ subst-α-¬inst (subst-inst-> (s≤s z≤n)) ∷ subst-α-inst (subst-α-¬inst (subst-weaken-≥ z≤n)) ∷ []))) (valid-zero (valid-inst (valid-ρ (valid-ρ⁼ (there (there (there (there here)))))))) run-inst (subst-registerₐ (subst-ρ-inst (subst-ρ-¬inst (subst-weaken-≥ z≤n))) (subst-α-¬inst (subst-inst-> (s≤s z≤n)) ∷ subst-α-¬inst (subst-inst-> (s≤s z≤n)) ∷ subst-α-¬inst (subst-inst-> (s≤s z≤n)) ∷ subst-α-¬inst (subst-inst-> (s≤s z≤n)) ∷ [])))))) ∷ [])) (of-heap []) (of-register of-[] (of-const ∷ of-const ∷ of-const ∷ of-const ∷ [])) (of-jmp (Γ-≤ (σ-≤ valid-[]) (int-≤ ∷ int-≤ ∷ int-≤ ∷ int-≤ ∷ [])) (of-word (of-inst (of-inst (of-inst (of-inst (of-inst (of-globval here (∀-≤ (valid-α ∷ valid-α ∷ valid-α ∷ valid-α ∷ valid-ρ ∷ []) (Γ-≤ (σ-≤ (valid-ρ⁼ (there (there (there (there here)))))) (α⁼-≤ (valid-α⁼ here) ∷ α⁼-≤ (valid-α⁼ (there here)) ∷ α⁼-≤ (valid-α⁼ (there (there here))) ∷ α⁼-≤ (valid-α⁼ (there (there (there here)))) ∷ []))) refl) (valid-zero (valid-inst (valid-α valid-int))) run-inst (subst-registerₐ (subst-ρ-¬inst (subst-inst-> (s≤s z≤n))) (subst-α-inst subst-int ∷ subst-α-¬inst (subst-inst-> (s≤s z≤n)) ∷ subst-α-¬inst (subst-inst-> (s≤s z≤n)) ∷ subst-α-¬inst (subst-inst-> (s≤s z≤n)) ∷ []))) (valid-zero (valid-inst (valid-α valid-int))) run-inst (subst-registerₐ (subst-ρ-¬inst (subst-inst-> (s≤s z≤n))) (subst-int ∷ subst-α-inst subst-int ∷ subst-α-¬inst (subst-inst-> (s≤s z≤n)) ∷ subst-α-¬inst (subst-inst-> (s≤s z≤n)) ∷ []))) (valid-zero (valid-inst (valid-α valid-int))) run-inst (subst-registerₐ (subst-ρ-¬inst (subst-inst-> (s≤s z≤n))) (subst-int ∷ subst-int ∷ subst-α-inst subst-int ∷ subst-α-¬inst (subst-inst-> (s≤s z≤n)) ∷ []))) (valid-zero (valid-inst (valid-α valid-int))) run-inst (subst-registerₐ (subst-ρ-¬inst (subst-inst-> (s≤s z≤n))) (subst-int ∷ subst-int ∷ subst-int ∷ subst-α-inst subst-int ∷ []))) (valid-zero (valid-inst (valid-ρ valid-[]))) run-inst (subst-registerₐ (subst-ρ-inst subst-[]) (subst-int ∷ subst-int ∷ subst-int ∷ subst-int ∷ [])))))

-- Execution
foo-exec : ∀ {H R} → foo-G ⊢ H , R , foo' ⇒ H , R , foo'
foo-exec = exec-jmp (instantiate-⟦⟧ (instantiate-⟦⟧ (instantiate-⟦⟧ (instantiate-⟦⟧ (instantiate-⟦⟧ (instantiate-globval here refl) run-inst (subst-registerₐ (subst-ρ-¬inst (subst-inst-> (s≤s z≤n))) (subst-α-inst subst-int ∷ subst-α-¬inst (subst-inst-> (s≤s z≤n)) ∷ subst-α-¬inst (subst-inst-> (s≤s z≤n)) ∷ subst-α-¬inst (subst-inst-> (s≤s z≤n)) ∷ [])) (subst-jmp (subst-word (subst-⟦⟧ (subst-⟦⟧ (subst-⟦⟧ (subst-⟦⟧ (subst-⟦⟧ subst-globval (subst-/ (subst-inst (subst-α (subst-α-inst subst-int))))) (subst-/ (subst-inst (subst-α (subst-α-¬inst (subst-inst-> (s≤s (s≤s (s≤s (s≤s z≤n)))))))))) (subst-/ (subst-inst (subst-α (subst-α-¬inst (subst-inst-> (s≤s (s≤s (s≤s z≤n))))))))) (subst-/ (subst-inst (subst-α (subst-α-¬inst (subst-inst-> (s≤s (s≤s z≤n)))))))) (subst-/ (subst-inst (subst-ρ (subst-ρ-¬inst (subst-inst-> (s≤s z≤n)))))))))) run-inst (subst-registerₐ (subst-ρ-¬inst (subst-inst-> (s≤s z≤n))) (subst-int ∷ subst-α-inst subst-int ∷ subst-α-¬inst (subst-inst-> (s≤s z≤n)) ∷ subst-α-¬inst (subst-inst-> (s≤s z≤n)) ∷ [])) (subst-jmp (subst-word (subst-⟦⟧ (subst-⟦⟧ (subst-⟦⟧ (subst-⟦⟧ (subst-⟦⟧ subst-globval (subst-/ (subst-inst (subst-α subst-int)))) (subst-/ (subst-inst (subst-α (subst-α-inst subst-int))))) (subst-/ (subst-inst (subst-α (subst-α-¬inst (subst-inst-> (s≤s (s≤s (s≤s z≤n))))))))) (subst-/ (subst-inst (subst-α (subst-α-¬inst (subst-inst-> (s≤s (s≤s z≤n)))))))) (subst-/ (subst-inst (subst-ρ (subst-ρ-¬inst (subst-inst-> (s≤s z≤n)))))))))) run-inst (subst-registerₐ (subst-ρ-¬inst (subst-inst-> (s≤s z≤n))) (subst-int ∷ subst-int ∷ subst-α-inst subst-int ∷ subst-α-¬inst (subst-inst-> (s≤s z≤n)) ∷ [])) (subst-jmp (subst-word (subst-⟦⟧ (subst-⟦⟧ (subst-⟦⟧ (subst-⟦⟧ (subst-⟦⟧ subst-globval (subst-/ (subst-inst (subst-α subst-int)))) (subst-/ (subst-inst (subst-α subst-int)))) (subst-/ (subst-inst (subst-α (subst-α-inst subst-int))))) (subst-/ (subst-inst (subst-α (subst-α-¬inst (subst-inst-> (s≤s (s≤s z≤n)))))))) (subst-/ (subst-inst (subst-ρ (subst-ρ-¬inst (subst-inst-> (s≤s z≤n)))))))))) run-inst (subst-registerₐ (subst-ρ-¬inst (subst-inst-> (s≤s z≤n))) (subst-int ∷ subst-int ∷ subst-int ∷ subst-α-inst subst-int ∷ [])) (subst-jmp (subst-word (subst-⟦⟧ (subst-⟦⟧ (subst-⟦⟧ (subst-⟦⟧ (subst-⟦⟧ subst-globval (subst-/ (subst-inst (subst-α subst-int)))) (subst-/ (subst-inst (subst-α subst-int)))) (subst-/ (subst-inst (subst-α subst-int)))) (subst-/ (subst-inst (subst-α (subst-α-inst subst-int))))) (subst-/ (subst-inst (subst-ρ (subst-ρ-¬inst (subst-inst-> (s≤s z≤n)))))))))) run-inst (subst-registerₐ (subst-ρ-inst subst-[]) (subst-int ∷ subst-int ∷ subst-int ∷ subst-int ∷ [])) (subst-jmp (subst-word (subst-⟦⟧ (subst-⟦⟧ (subst-⟦⟧ (subst-⟦⟧ (subst-⟦⟧ subst-globval (subst-/ (subst-inst (subst-α subst-int)))) (subst-/ (subst-inst (subst-α subst-int)))) (subst-/ (subst-inst (subst-α subst-int)))) (subst-/ (subst-inst (subst-α subst-int)))) (subst-/ (subst-inst (subst-ρ (subst-ρ-inst subst-[]))))))))
